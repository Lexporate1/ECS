//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class Test1Entity {

    public Test1MultipleEventsStandardEventRemovedListenerComponent test1MultipleEventsStandardEventRemovedListener { get { return (Test1MultipleEventsStandardEventRemovedListenerComponent)GetComponent(Test1ComponentsLookup.Test1MultipleEventsStandardEventRemovedListener); } }
    public bool hasTest1MultipleEventsStandardEventRemovedListener { get { return HasComponent(Test1ComponentsLookup.Test1MultipleEventsStandardEventRemovedListener); } }

    public void AddTest1MultipleEventsStandardEventRemovedListener(System.Collections.Generic.List<ITest1MultipleEventsStandardEventRemovedListener> newValue) {
        var index = Test1ComponentsLookup.Test1MultipleEventsStandardEventRemovedListener;
        var component = (Test1MultipleEventsStandardEventRemovedListenerComponent)CreateComponent(index, typeof(Test1MultipleEventsStandardEventRemovedListenerComponent));
        component.value = newValue;
        AddComponent(index, component);
    }

    public void ReplaceTest1MultipleEventsStandardEventRemovedListener(System.Collections.Generic.List<ITest1MultipleEventsStandardEventRemovedListener> newValue) {
        var index = Test1ComponentsLookup.Test1MultipleEventsStandardEventRemovedListener;
        var component = (Test1MultipleEventsStandardEventRemovedListenerComponent)CreateComponent(index, typeof(Test1MultipleEventsStandardEventRemovedListenerComponent));
        component.value = newValue;
        ReplaceComponent(index, component);
    }

    public void RemoveTest1MultipleEventsStandardEventRemovedListener() {
        RemoveComponent(Test1ComponentsLookup.Test1MultipleEventsStandardEventRemovedListener);
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class Test1Matcher {

    static Entitas.IMatcher<Test1Entity> _matcherTest1MultipleEventsStandardEventRemovedListener;

    public static Entitas.IMatcher<Test1Entity> Test1MultipleEventsStandardEventRemovedListener {
        get {
            if (_matcherTest1MultipleEventsStandardEventRemovedListener == null) {
                var matcher = (Entitas.Matcher<Test1Entity>)Entitas.Matcher<Test1Entity>.AllOf(Test1ComponentsLookup.Test1MultipleEventsStandardEventRemovedListener);
                matcher.componentNames = Test1ComponentsLookup.componentNames;
                _matcherTest1MultipleEventsStandardEventRemovedListener = matcher;
            }

            return _matcherTest1MultipleEventsStandardEventRemovedListener;
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.EventEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class Test1Entity {

    public void AddTest1MultipleEventsStandardEventRemovedListener(ITest1MultipleEventsStandardEventRemovedListener value) {
        var listeners = hasTest1MultipleEventsStandardEventRemovedListener
            ? test1MultipleEventsStandardEventRemovedListener.value
            : new System.Collections.Generic.List<ITest1MultipleEventsStandardEventRemovedListener>();
        listeners.Add(value);
        ReplaceTest1MultipleEventsStandardEventRemovedListener(listeners);
    }

    public void RemoveTest1MultipleEventsStandardEventRemovedListener(ITest1MultipleEventsStandardEventRemovedListener value, bool removeComponentWhenEmpty = true) {
        var listeners = test1MultipleEventsStandardEventRemovedListener.value;
        listeners.Remove(value);
        if (removeComponentWhenEmpty && listeners.Count == 0) {
            RemoveTest1MultipleEventsStandardEventRemovedListener();
        } else {
            ReplaceTest1MultipleEventsStandardEventRemovedListener(listeners);
        }
    }
}
