//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class Test2Entity {

    public Test2AnyMultipleEventsStandardEventListenerComponent test2AnyMultipleEventsStandardEventListener { get { return (Test2AnyMultipleEventsStandardEventListenerComponent)GetComponent(Test2ComponentsLookup.Test2AnyMultipleEventsStandardEventListener); } }
    public bool hasTest2AnyMultipleEventsStandardEventListener { get { return HasComponent(Test2ComponentsLookup.Test2AnyMultipleEventsStandardEventListener); } }

    public void AddTest2AnyMultipleEventsStandardEventListener(System.Collections.Generic.List<ITest2AnyMultipleEventsStandardEventListener> newValue) {
        var index = Test2ComponentsLookup.Test2AnyMultipleEventsStandardEventListener;
        var component = (Test2AnyMultipleEventsStandardEventListenerComponent)CreateComponent(index, typeof(Test2AnyMultipleEventsStandardEventListenerComponent));
        component.value = newValue;
        AddComponent(index, component);
    }

    public void ReplaceTest2AnyMultipleEventsStandardEventListener(System.Collections.Generic.List<ITest2AnyMultipleEventsStandardEventListener> newValue) {
        var index = Test2ComponentsLookup.Test2AnyMultipleEventsStandardEventListener;
        var component = (Test2AnyMultipleEventsStandardEventListenerComponent)CreateComponent(index, typeof(Test2AnyMultipleEventsStandardEventListenerComponent));
        component.value = newValue;
        ReplaceComponent(index, component);
    }

    public void RemoveTest2AnyMultipleEventsStandardEventListener() {
        RemoveComponent(Test2ComponentsLookup.Test2AnyMultipleEventsStandardEventListener);
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class Test2Matcher {

    static Entitas.IMatcher<Test2Entity> _matcherTest2AnyMultipleEventsStandardEventListener;

    public static Entitas.IMatcher<Test2Entity> Test2AnyMultipleEventsStandardEventListener {
        get {
            if (_matcherTest2AnyMultipleEventsStandardEventListener == null) {
                var matcher = (Entitas.Matcher<Test2Entity>)Entitas.Matcher<Test2Entity>.AllOf(Test2ComponentsLookup.Test2AnyMultipleEventsStandardEventListener);
                matcher.componentNames = Test2ComponentsLookup.componentNames;
                _matcherTest2AnyMultipleEventsStandardEventListener = matcher;
            }

            return _matcherTest2AnyMultipleEventsStandardEventListener;
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.EventEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class Test2Entity {

    public void AddTest2AnyMultipleEventsStandardEventListener(ITest2AnyMultipleEventsStandardEventListener value) {
        var listeners = hasTest2AnyMultipleEventsStandardEventListener
            ? test2AnyMultipleEventsStandardEventListener.value
            : new System.Collections.Generic.List<ITest2AnyMultipleEventsStandardEventListener>();
        listeners.Add(value);
        ReplaceTest2AnyMultipleEventsStandardEventListener(listeners);
    }

    public void RemoveTest2AnyMultipleEventsStandardEventListener(ITest2AnyMultipleEventsStandardEventListener value, bool removeComponentWhenEmpty = true) {
        var listeners = test2AnyMultipleEventsStandardEventListener.value;
        listeners.Remove(value);
        if (removeComponentWhenEmpty && listeners.Count == 0) {
            RemoveTest2AnyMultipleEventsStandardEventListener();
        } else {
            ReplaceTest2AnyMultipleEventsStandardEventListener(listeners);
        }
    }
}
