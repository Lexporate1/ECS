//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGenerator.ContextsGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace Entitas {

    public sealed class Contexts {

        public static Contexts sharedInstance {
            get {
                if(_sharedInstance == null) {
                    _sharedInstance = new Contexts();
                }

                return _sharedInstance;
            }
            set { _sharedInstance = value; }
        }

        static Contexts _sharedInstance;

        public static void ObserveContext(IContext context) {
            #if(!ENTITAS_DISABLE_VISUAL_DEBUGGING && UNITY_EDITOR)
            if(UnityEngine.Application.isPlaying) {
                var observer = new Entitas.Unity.VisualDebugging.ContextObserver(context);
                UnityEngine.Object.DontDestroyOnLoad(observer.gameObject);
            }
            #endif
        }

        public static BlueprintsContext CreateBlueprintsContext() {
            var info = new ContextInfo("Blueprints", BlueprintsComponentIds.componentNames, BlueprintsComponentIds.componentTypes);
            var context = new BlueprintsContext(BlueprintsComponentIds.TotalComponents, 0, info);
            ObserveContext(context);
            return context;
        }

        public static VisualDebuggingContext CreateVisualDebuggingContext() {
            var info = new ContextInfo("VisualDebugging", VisualDebuggingComponentIds.componentNames, VisualDebuggingComponentIds.componentTypes);
            var context = new VisualDebuggingContext(VisualDebuggingComponentIds.TotalComponents, 0, info);
            ObserveContext(context);
            return context;
        }

        public IContext[] allContexts { get { return new IContext [] { blueprints, visualDebugging }; } }

        public BlueprintsContext blueprints;
        public VisualDebuggingContext visualDebugging;

        public void SetAllContexts() {
            blueprints = CreateBlueprintsContext();
            visualDebugging = CreateVisualDebuggingContext();
        }
    }
}
