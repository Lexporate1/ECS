using System;

namespace Entitas.Generators
{
    public static class Templates
    {
        static readonly System.CodeDom.Compiler.CodeDomProvider CodeDomProvider =
            System.CodeDom.Compiler.CodeDomProvider.CreateProvider(Microsoft.CodeAnalysis.LanguageNames.CSharp);

        public static string GeneratedPath(string hintName)
        {
            return $"{hintName}.g.cs";
        }

        public static string GeneratedFileHeader(string generatorSource)
        {
            return $$"""
                //------------------------------------------------------------------------------
                // <auto-generated>
                //     This code was generated by
                //     {{generatorSource}}
                //
                //     Changes to this file may cause incorrect behavior and will be lost if
                //     the code is regenerated.
                // </auto-generated>
                //------------------------------------------------------------------------------

                """;
        }

        public static string NamespaceDeclaration(string? @namespace, string content)
        {
            return @namespace is not null
                ? $"namespace {@namespace}\n{{\n{content}}}\n"
                : content;
        }

        public static string NamespaceDeclaration(string? @namespace, string suffix, string content)
        {
            return @namespace is not null
                ? $"namespace {@namespace}.{suffix}\n{{\n{content}}}\n"
                : $"namespace {suffix}\n{{\n{content}}}\n";
        }

        public static string CombinedNamespace(string? @namespace, string suffix)
        {
            return @namespace is not null
                ? $"{@namespace}.{suffix}"
                : suffix;
        }

        public static string AddSuffix(this string str, string suffix) =>
            str.EndsWith(suffix, StringComparison.Ordinal) ? str : str + suffix;

        public static string RemoveSuffix(this string str, string suffix) =>
            str.EndsWith(suffix, StringComparison.Ordinal) ? str[..^suffix.Length] : str;

        public static string ToValidLowerFirst(this string value)
        {
            var lowerFirst = !string.IsNullOrEmpty(value)
                ? char.ToLower(value[0]) + value[1..]
                : value;

            return !CodeDomProvider.IsValidIdentifier(lowerFirst)
                ? $"@{lowerFirst}"
                : lowerFirst;
        }
    }
}
