//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGenerator.ContextsGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Entitas;
            
public partial class Contexts {

    public static Contexts sharedInstance {
        get {
            if(_sharedInstance == null) {
                _sharedInstance = new Contexts();
            }

            return _sharedInstance;
        }
        set { _sharedInstance = value; }
    }

    static Contexts _sharedInstance;

    public static IContext<TEntity> CreateContext<TEntity>(string name,
                                                           int totalComponents,
                                                           string[] componentNames,
                                                           System.Type[] componentTypes)
        where TEntity : class, IEntity, new() {
        var context = new Context<TEntity>(totalComponents, 0, new ContextInfo(
            name, componentNames, componentTypes));

#if(!ENTITAS_DISABLE_VISUAL_DEBUGGING && UNITY_EDITOR)
        if(UnityEngine.Application.isPlaying) {
            var observer = new Entitas.Unity.VisualDebugging.ContextObserver(context);
            UnityEngine.Object.DontDestroyOnLoad(observer.gameObject);
        }
#endif

        return context;
    }

    public static IContext<TestEntity> CreateTestContext() {
        return CreateContext<TestEntity>("Test", TestComponentsLookup.TotalComponents, TestComponentsLookup.componentNames, TestComponentsLookup.componentTypes);
    }

    public static IContext<Test2Entity> CreateTest2Context() {
        return CreateContext<Test2Entity>("Test2", Test2ComponentsLookup.TotalComponents, Test2ComponentsLookup.componentNames, Test2ComponentsLookup.componentTypes);
    }

    public IContext<TestEntity> test { get; set; }
    public IContext<Test2Entity> test2 { get; set; }

    public IContext[] allContexts { get { return new IContext [] { test, test2 }; } }

    public void SetAllContexts() {
        test = CreateTestContext();
        test2 = CreateTest2Context();
    }
}
