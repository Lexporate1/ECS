//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGenerator.ComponentExtensionsGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Entitas;

public sealed partial class TestEntity : Entity {

    public ComponentWithFieldsAndProperties componentWithFieldsAndProperties { get { return (ComponentWithFieldsAndProperties)GetComponent(TestComponentIds.ComponentWithFieldsAndProperties); } }
    public bool hasComponentWithFieldsAndProperties { get { return HasComponent(TestComponentIds.ComponentWithFieldsAndProperties); } }

    public void AddComponentWithFieldsAndProperties(string newPublicField, string newPublicProperty) {
        var component = CreateComponent<ComponentWithFieldsAndProperties>(TestComponentIds.ComponentWithFieldsAndProperties);
        component.publicField = newPublicField;
        component.publicProperty = newPublicProperty;
        AddComponent(TestComponentIds.ComponentWithFieldsAndProperties, component);
    }

    public void ReplaceComponentWithFieldsAndProperties(string newPublicField, string newPublicProperty) {
        var component = CreateComponent<ComponentWithFieldsAndProperties>(TestComponentIds.ComponentWithFieldsAndProperties);
        component.publicField = newPublicField;
        component.publicProperty = newPublicProperty;
        ReplaceComponent(TestComponentIds.ComponentWithFieldsAndProperties, component);
    }

    public void RemoveComponentWithFieldsAndProperties() {
        RemoveComponent(TestComponentIds.ComponentWithFieldsAndProperties);
    }
}

public sealed partial class TestMatcher {

    static IMatcher<TestEntity> _matcherComponentWithFieldsAndProperties;

    public static IMatcher<TestEntity> ComponentWithFieldsAndProperties {
        get {
            if(_matcherComponentWithFieldsAndProperties == null) {
                var matcher = (Matcher<TestEntity>)Matcher<TestEntity>.AllOf(TestComponentIds.ComponentWithFieldsAndProperties);
                matcher.componentNames = TestComponentIds.componentNames;
                _matcherComponentWithFieldsAndProperties = matcher;
            }

            return _matcherComponentWithFieldsAndProperties;
        }
    }
}
