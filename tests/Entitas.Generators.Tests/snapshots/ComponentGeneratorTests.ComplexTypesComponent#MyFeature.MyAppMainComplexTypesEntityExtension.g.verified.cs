//HintName: MyFeature.MyAppMainComplexTypesEntityExtension.g.cs
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by
//     Entitas.Generators.ComponentGenerator.EntityExtension
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace MyFeature
{
public static class MyAppMainComplexTypesEntityExtension
{
    public static bool HasComplexTypes(this global::MyApp.Main.Entity entity)
    {
        return entity.HasComponent(MyAppMainComplexTypesComponentIndex.Index.Value);
    }

    public static global::MyApp.Main.Entity AddComplexTypes(this global::MyApp.Main.Entity entity, int[,,] array3D, System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<int>> dictList, MyFeature.NestedClass.InnerClass nestedClass, MyFeature.NestedClass.InnerEnum nestedEnum)
    {
        var index = MyAppMainComplexTypesComponentIndex.Index.Value;
        var componentPool = entity.GetComponentPool(index);
        var component = componentPool.Count > 0
            ? (ComplexTypesComponent)componentPool.Pop()
            : new ComplexTypesComponent();
        component.Array3D = array3D;
        component.DictList = dictList;
        component.NestedClass = nestedClass;
        component.NestedEnum = nestedEnum;
        entity.AddComponent(index, component);
        return entity;
    }

    public static global::MyApp.Main.Entity ReplaceComplexTypes(this global::MyApp.Main.Entity entity, int[,,] array3D, System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<int>> dictList, MyFeature.NestedClass.InnerClass nestedClass, MyFeature.NestedClass.InnerEnum nestedEnum)
    {
        var index = MyAppMainComplexTypesComponentIndex.Index.Value;
        var componentPool = entity.GetComponentPool(index);
        var component = componentPool.Count > 0
            ? (ComplexTypesComponent)componentPool.Pop()
            : new ComplexTypesComponent();
        component.Array3D = array3D;
        component.DictList = dictList;
        component.NestedClass = nestedClass;
        component.NestedEnum = nestedEnum;
        entity.ReplaceComponent(index, component);
        return entity;
    }

    public static global::MyApp.Main.Entity RemoveComplexTypes(this global::MyApp.Main.Entity entity)
    {
        entity.RemoveComponent(MyAppMainComplexTypesComponentIndex.Index.Value);
        return entity;
    }

    public static ComplexTypesComponent GetComplexTypes(this global::MyApp.Main.Entity entity)
    {
        return (ComplexTypesComponent)entity.GetComponent(MyAppMainComplexTypesComponentIndex.Index.Value);
    }
}
}
