using System;

namespace Entitas.Generators
{
    public static class Templates
    {
        public static string GeneratedPath(string hintName)
        {
            return $"{hintName}.g.cs";
        }

        public static string GeneratedFileHeader(string generatorSource)
        {
            return $$"""
                //------------------------------------------------------------------------------
                // <auto-generated>
                //     This code was generated by
                //     {{generatorSource}}
                //
                //     Changes to this file may cause incorrect behavior and will be lost if
                //     the code is regenerated.
                // </auto-generated>
                //------------------------------------------------------------------------------

                """;
        }

        public static string CombinedNamespace(string? @namespace, string suffix)
        {
            return @namespace is not null
                ? $"{@namespace}.{suffix}"
                : suffix;
        }

        public static string NamespaceDeclaration(string? @namespace, string content)
        {
            return @namespace is not null
                ? $"namespace {@namespace}\n{{\n{content}}}\n"
                : content;
        }

        public static string NamespaceDeclaration(string? @namespace, string suffix, string content)
        {
            return NamespaceDeclaration(CombinedNamespace(@namespace, suffix), content);
        }

        public static string AddSuffix(this string str, string suffix)
        {
            return str.EndsWith(suffix, StringComparison.Ordinal) ? str : str + suffix;
        }

        public static string RemoveSuffix(this string str, string suffix)
        {
            return str.EndsWith(suffix, StringComparison.Ordinal) ? str.Substring(0, str.Length - suffix.Length) : str;
        }

        public static bool HasAttributeSuffix(this string str, string suffix)
        {
            return str.EndsWith(suffix, StringComparison.Ordinal) ||
                   str.EndsWith(suffix + "Attribute", StringComparison.Ordinal);
        }

        public static string RemoveAttributeSuffix(this string str, string suffix)
        {
            return str.EndsWith(suffix, StringComparison.Ordinal)
                ? str.Substring(0, str.Length - suffix.Length)
                : str.RemoveSuffix(suffix + "Attribute");
        }
    }
}
