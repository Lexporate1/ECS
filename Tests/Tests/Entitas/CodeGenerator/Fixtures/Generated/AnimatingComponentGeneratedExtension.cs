//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGenerator.ComponentExtensionsGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace Entitas {

    public sealed partial class TestEntity : XXXEntity {

        static readonly AnimatingComponent animatingComponent = new AnimatingComponent();

        public bool isAnimating {
            get { return HasComponent(ComponentIds.Animating); }
            set {
                if(value != isAnimating) {
                    if(value) {
                        AddComponent(ComponentIds.Animating, animatingComponent);
                    } else {
                        RemoveComponent(ComponentIds.Animating);
                    }
                }
            }
        }
    }

    public sealed partial class TestContext : Context<TestEntity> {

        public TestEntity animatingEntity { get { return GetGroup(Matcher.Animating).GetSingleEntity(); } }

        public bool isAnimating {
            get { return animatingEntity != null; }
            set {
                var entity = animatingEntity;
                if(value != (entity != null)) {
                    if(value) {
                        CreateEntity().isAnimating = true;
                    } else {
                        DestroyEntity(entity);
                    }
                }
            }
        }
    }

    public partial class Matcher {

        static IMatcher<TestEntity> _matcherAnimating;

        public static IMatcher<TestEntity> Animating {
            get {
                if(_matcherAnimating == null) {
                    var matcher = (Matcher<TestEntity>)Matcher<TestEntity>.AllOf(ComponentIds.Animating);
                    matcher.componentNames = ComponentIds.componentNames;
                    _matcherAnimating = matcher;
                }

                return _matcherAnimating;
            }
        }
    }
}
