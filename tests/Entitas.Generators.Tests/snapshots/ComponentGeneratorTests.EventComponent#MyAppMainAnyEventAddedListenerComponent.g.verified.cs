//HintName: MyAppMainAnyEventAddedListenerComponent.g.cs
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by
//     Entitas.Generators.ComponentGenerator.Events
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using global::MyApp.Main;

public interface IMyAppMainAnyEventAddedListener
{
    void OnAnyEventAdded(Entity entity, string value);
}

public sealed class MyAppMainAnyEventAddedListenerComponent : global::Entitas.IComponent
{
    public global::System.Collections.Generic.List<IMyAppMainAnyEventAddedListener> Value;
}

public static class MyAppMainAnyEventAddedListenerEventEntityExtension
{
    public static Entity AddAnyEventAddedListener(this Entity entity, IMyAppMainAnyEventAddedListener value)
    {
        var listeners = entity.HasAnyEventAddedListener()
            ? entity.GetAnyEventAddedListener().Value
            : new global::System.Collections.Generic.List<IMyAppMainAnyEventAddedListener>();
        listeners.Add(value);
        return entity.ReplaceAnyEventAddedListener(listeners);
    }

    public static void RemoveAnyEventAddedListener(this Entity entity, IMyAppMainAnyEventAddedListener value, bool removeListenerWhenEmpty = true)
    {
        var listeners = entity.GetAnyEventAddedListener().Value;
        listeners.Remove(value);
        if (removeListenerWhenEmpty && listeners.Count == 0)
        {
            entity.RemoveAnyEventAddedListener();
            if (entity.IsEmpty())
                entity.Destroy();
        }
        else
        {
            entity.ReplaceAnyEventAddedListener(listeners);
        }
    }
}

public sealed class MyAppMainAnyEventAddedEventSystem : global::Entitas.ReactiveSystem<Entity>
{
    readonly global::Entitas.IGroup<Entity> _listeners;
    readonly global::System.Collections.Generic.List<Entity> _entityBuffer;
    readonly global::System.Collections.Generic.List<IMyAppMainAnyEventAddedListener> _listenerBuffer;

    public MyAppMainAnyEventAddedEventSystem(MyApp.MainContext context) : base(context)
    {
        _listeners = context.GetGroup(MyAppMainAnyEventAddedListenerMatcher.AnyEventAddedListener);
        _entityBuffer = new global::System.Collections.Generic.List<Entity>();
        _listenerBuffer = new global::System.Collections.Generic.List<IMyAppMainAnyEventAddedListener>();
    }

    protected override global::Entitas.ICollector<Entity> GetTrigger(global::Entitas.IContext<Entity> context)
    {
        return global::Entitas.CollectorContextExtension.CreateCollector(
            context, global::Entitas.TriggerOnEventMatcherExtension.Added(MyAppMainEventMatcher.Event)
        );
    }

    protected override bool Filter(Entity entity)
    {
        return entity.HasEvent();
    }

    protected override void Execute(global::System.Collections.Generic.List<Entity> entities)
    {
        foreach (var entity in entities)
        {
            var component = entity.GetEvent();
            foreach (var listenerEntity in _listeners.GetEntities(_entityBuffer))
            {
                _listenerBuffer.Clear();
                _listenerBuffer.AddRange(listenerEntity.GetAnyEventAddedListener().Value);
                foreach (var listener in _listenerBuffer)
                {
                    listener.OnAnyEventAdded(entity, component.Value);
                }
            }
        }
    }
}
